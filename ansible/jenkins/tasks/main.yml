---
- name: Update APT package manager repositories cache
  apt:
    update_cache: yes

- name: ensure the jenkins apt repository key is installed
  shell: |
    curl -fsSL https://pkg.jenkins.io/debian/jenkins.io.key | sudo tee \
    /usr/share/keyrings/jenkins-keyring.asc > /dev/null

- name: Adding Jenkins Repository into /etc/apt/sources.list.d file
  shell: |
    echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
    https://pkg.jenkins.io/debian binary/ | sudo tee \
    /etc/apt/sources.list.d/jenkins.list > /dev/null

- name: Update all packages to their latest version
  apt:
    name: "*"
    state: latest

- name: Update repository to install GIT
  apt_repository:
    repo: 'ppa:git-core/ppa'
    state: present

- name: Update APT package manager repositories cache
  apt:
    update_cache: yes

- name: Install Packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items:
    - openjdk-11-jdk
    - maven
    - git
    - jenkins

- name: ensure jenkins is running
  service: name=jenkins state=started

- name: read admin pwd
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: adminpwd

- name: unlock and add admin user
  jenkins_script:
   script: |
    import jenkins.model.*
    import hudson.security.*
    def instance = Jenkins.getInstance()
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount('jenkins', '${user_pwd}')
    instance.setSecurityRealm(hudsonRealm)
    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    strategy.setAllowAnonymousRead(false)
    instance.setAuthorizationStrategy(strategy)
    instance.save()
   args:
    user_pwd: "{{ admin_user_pass }}"
   user: admin
   password: "{{ adminpwd.stdout }}"

- name: complete setup wizard
  jenkins_script:
   script: |
    import static jenkins.model.Jenkins.instance as jenkins
    import jenkins.install.InstallState
    if (!jenkins.installState.isSetupComplete()) {
      InstallState.INITIAL_SETUP_COMPLETED.initializeState()
    }
   user: admin
   password: "{{ adminpwd.stdout }}"

- name: install plugin
  jenkins_plugin:
   name: "{{ item }}"
   state: latest
   url_username: admin
   url_password: "{{ adminpwd.stdout }}"
  with_items: "{{ jenkins_plugins }}"

- name: Restart Jenkins to make the plugin data available
  service: name=jenkins state=restarted
